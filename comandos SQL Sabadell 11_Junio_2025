########################### Dia 11 de Junio ######################
--- crear la base de datos ---
CREATE DATABASE db_empl;

--- posicionar en esa base de datos ---
USE db_empl;

--- crear la tabla t_offices ---
crear tabla t_offices con 4 campos:
	offc_id de tipo entero y obligatorio
	offc_country texto de 30 caracteres obligatorio
	offc_description texto de 90 caracteres obligatorio
	offc_name texto 30 caracteres optativo

CREATE TABLE t_offices(
	offc_id int NOT NULL,
	offc_country varchar(30) NOT NULL,
	offc_description varchar(90) NOT NULL,
	offc_name varchar(30)
);

--- eliminar el campo offc_name de la tabla ---
ALTER TABLE t_offices
	DROP offc_name;

--- agregar el campo offc_city texto 50 caracteres obligatorio ---
ALTER TABLE t_offices
	ADD offc_city varchar(50) NOT NULL;  

--- cambiar el campo offc_description texto de 100 caracteres optativo ---
ALTER TABLE t_offices  
	CHANGE offc_description   
    offc_description varchar(100);

-- no funciona  en sqlite
--ALTER TABLE t_offices  
--	CHANGE COLUMN offc_description   
--    offc_description varchar(100);
-- como alternativo borro y vuelvo a crear el campo   
ALTER TABLE t_offices
	DROP offc_description;
    
ALTER TABLE t_offices
	ADD offc_description varchar(100); 

-- crear el campo despues de otro campo 
ALTER TABLE t_offices
	ADD offc_description varchar(100)
    AFTER offc_country; 

--- insertar registros en la tabla ---
INSERT INTO t_offices
	 (offc_id, offc_country, offc_description, offc_city)
   VALUES
     (10, 'España', 'Oficina central', 'Madrid');
    
-- si relleno todos los campos no es necesario porner el nombre
INSERT INTO t_offices
   VALUES
     (11, 'España', null, 'Barcelona');
     
-- inserccion multiple, varios registros a la vez
INSERT INTO t_offices
   VALUES
     (20, 'Chile', 'Oficina principal de Chile', 'Santiago'),
     (30, 'Argentina', null, 'Buenos aires');

-- comprobar si tenemos los 4 registros
SELECT * FROM t_offices;

########################### Dia 12 de Junio ######################

-- Consultar todos los registros con todos los campos
select * from t_offices;

-- Consultar todos los registros con los campos country y city
select offc_country, offc_city from t_offices;

-- Consultar todos campos de los registros donde city Barcelona
select * from t_offices WHERE offc_city = 'Barcelona';

-- Consultar todos campos de los registros donde city contenga la letra e
select * from t_offices WHERE offc_city LIKE '%e%';

-- Consultar donde city comience por la letra B
select * from t_offices WHERE offc_city LIKE 'B%';

-- Consultar donde city termine por la letra s
select * from t_offices WHERE offc_city LIKE '%s';

-- Consultar donde city contenga la letra e y country sea España
select * from t_offices WHERE offc_city LIKE '%e%' AND offc_country = 'España';

-- Consultar donde city contenga la letra e y country sea España y id sea 11
select * from t_offices WHERE offc_city LIKE '%e%' AND offc_country = 'España' AND offc_id=11;

-- Consultar donde city contenga la letra e y country sea España o que id sea 10
select * from t_offices WHERE offc_city LIKE '%e%' AND offc_country = 'España' OR offc_id=10;

-- Consultar donde city sea Madrid o Barcelona
SELECT OFFC_COUNTRY, OFFC_CITY 
FROM T_OFFICES
WHERE OFFC_CITY IN ('Madrid', 'Barcelona');

-- Cambiar "Buenos aires" por "Buenos Aires"
UPDATE t_offices
	SET offc_city = 'Buenos Aires'
    WHERE offc_city = 'Buenos aires';


-- Crear una tabla con lineas de conocimiento
CREATE TABLE t_knowledge_lines (
	knln_id INT NOT NULL,
    knln_name VARCHAR(45) NOT NULL,
    PRIMARY KEY (knln_id)
);

-- Insertamos 3 registros
INSERT INTO t_knowledge_lines
	VALUES (10, 'Java');
INSERT INTO t_knowledge_lines
	VALUES (20, '.NET');
INSERT INTO t_knowledge_lines
	VALUES (30, 'Mainframe');

select * from t_knowledge_lines;

-- Vamos a modificar la tabla t_offices para que el campo offc_id sea PK (primary key)
ALTER TABLE t_offices
	ADD primary key (offc_id);

-- Crear la tabla de empleados
-- en sqlite AUTOINCREMENT
CREATE TABLE t_employees (
  empl_id INT NOT NULL AUTO_INCREMENT,   
  offc_id INT NOT NULL, 
  knln_id INT,
  empl_forname VARCHAR(50) NOT NULL,
  empl_middle_name VARCHAR(50),
  empl_surname VARCHAR(50) NOT NULL,
  empl_number INT NOT NULL,
  empl_hire_date DATETIME NOT NULL,
  empl_mentor_id INT,
  PRIMARY KEY (empl_id));
  
-- Insertar 3 registros
INSERT INTO t_employees 
	(offc_id,knln_id, empl_forname, empl_surname, empl_number,empl_hire_date)
VALUES
	(10,10,'Juan','Perez',150,'2005-04-15');

INSERT INTO t_employees 
	(offc_id,knln_id, empl_forname, empl_surname, empl_number,empl_hire_date,empl_mentor_id)
VALUES
	(11,20,'Luis','Gonzalez',160,'2006-05-18', 1);
    
INSERT INTO t_employees 
	(offc_id,empl_forname, empl_surname, empl_number,empl_hire_date)
VALUES
	(20,'Pedro','Garcia',180,'2006-05-18');
    
-- Version sqlite
INSERT INTO t_employees 
	(empl_id,offc_id,knln_id, empl_forname, empl_surname, empl_number,empl_hire_date)
VALUES
	(1,10,10,'Juan','Perez',150,'2005-04-15');
    
INSERT INTO t_employees 
	(empl_id,offc_id,knln_id, empl_forname, empl_surname, empl_number,empl_hire_date,empl_mentor_id)
VALUES
	(2,11,20,'Luis','Gonzalez',160,'2006-05-18', 1);
    
INSERT INTO t_employees 
	(empl_id,offc_id,empl_forname, empl_surname, empl_number,empl_hire_date)
VALUES
	(3,20,'Pedro','Garcia',180,'2006-05-18');
    
-- En Oracle SQL developer
INSERT INTO t_employees 
	(empl_id,offc_id,knln_id, empl_forname, empl_surname, empl_number,empl_hire_date)
VALUES
	(1,10,10,'Juan','Perez',150, TO_DATE('2005-04-15','YYYY-MM-DD'));

-- Crear la tabla de proyectos
CREATE TABLE t_projects(
	prjt_id INT NOT NULL,
    prjt_code VARCHAR(16) NOT NULL,
    prjt_name VARCHAR(50) NOT NULL,
    PRIMARY KEY (prjt_id)  -- PK simple, de un solo campo
);

-- Crear la tabla intermedia para relaccionar proyectos y empleados
CREATE TABLE t_projects_employees(
	prjt_id INT NOT NULL,
    empl_id INT NOT NULL,
    PRIMARY KEY (prjt_id, empl_id) -- PK Compuesta, consta de mas de un campo
); 

select * from t_employees;

-- Insertar 2 proyectos en la tabla de proyectos
INSERT INTO t_projects
	VALUES (1, 'EXT-001000-01234', 'Gestion de usuarios');

INSERT INTO t_projects
	VALUES (2, 'INT-001000-03200', 'Cursos de formacion');
    
select * from t_projects;

-- Insertar valores en la tabla intermedia
INSERT INTO t_projects_employees
	VALUES (1,1); -- en el proyecto 1 trabaja el empleado 1
INSERT INTO t_projects_employees
	VALUES (1,2); -- en el proyecto 1 trabaja el empleado 2
INSERT INTO t_projects_employees
	VALUES (2,2); -- en el proyecto 2 trabaja el empleado 2

select * from t_projects_employees;

-- Crear la FK en la tabla de empleados relaccionada con la tabla de oficinas
-- Y ademas creamos un indice sobre el campo offc_id
ALTER TABLE t_employees
	ADD INDEX fk_empl_offc (offc_id),
    ADD CONSTRAINT fk_empl_offc
		FOREIGN KEY (offc_id)
        REFERENCES t_offices (offc_id);

-- Crear el indice en Sqlite
CREATE INDEX fk_empl_offc ON t_employees (offc_id);

########################### Dia 16 de Junio ######################

-- Crear la FK en la tabla de empleados relaccionada con la tabla de lineas de conocimiento
-- Y ademas creamos un indice sobre el campo knln_id
ALTER TABLE t_employees
	ADD INDEX fk_empl_knln (knln_id),
    ADD CONSTRAINT fk_empl_knln
		FOREIGN KEY (knln_id)
        REFERENCES t_knowledge_lines (knln_id);

-- Crear la FK en la tabla intermedia proyectos_empleados relaccionada con la tabla de proyectos
-- Y ademas creamos un indice sobre el campo prtj_id
ALTER TABLE t_projects_employees
	ADD INDEX fk_prem_prjt (prjt_id),
    ADD CONSTRAINT fk_prem_prjt
		FOREIGN KEY (prjt_id)
        REFERENCES t_projects (prjt_id);

-- Crear la FK en la tabla intermedia proyectos_empleados relaccionada con la tabla de empleados
-- Y ademas creamos un indice sobre el campo empl_id
ALTER TABLE t_projects_employees
	ADD INDEX fk_prem_empl (empl_id),
    ADD CONSTRAINT fk_prem_empl
		FOREIGN KEY (empl_id)
        REFERENCES t_employees (empl_id);


-- mostrar el forname, surname del empleado, city de oficina y name de la linea de conociemto
-- de los empleados de España o Chile
-- y ademas el empleado no tiene mentor
select e.empl_forname, e.empl_surname, o.offc_city, k.knln_name
	from t_employees e
    inner join t_offices  o on e.offc_id = o.offc_id
    left join t_knowledge_lines k on e.knln_id = k.knln_id
    where o.offc_country in ('España', 'Chile')
		and e.empl_mentor_id is null;

-- mostrar de la tabla de proyectos: id y nombre, de la tabla de empleados: forname y surname
-- filtrar solo por nombre = Juan
select p.prjt_id, p.prjt_name, e.empl_forname, e.empl_surname
	from t_projects p
    inner join t_projects_employees pe on p.prjt_id = pe.prjt_id
    inner join t_employees e on pe.empl_id = e.empl_id
    where e.empl_forname = 'Juan';

-- Solo los nombres de los empleados y nombre conocimiento 
-- tienen asignada una linea de conocimiento    
select e.empl_forname, k.knln_name
	from t_employees e
    inner join t_knowledge_lines k on e.knln_id = k.knln_id;

-- Los nombres de los empleados y nombre conocimiento aunque
-- no esten asignadas a los empleados
select e.empl_forname, k.knln_name
	from t_employees e
    right outer join t_knowledge_lines k on e.knln_id = k.knln_id;

-- otra forma de hacerlo
select e.empl_forname, k.knln_name
	from t_knowledge_lines k 
    left outer join t_employees e on e.knln_id = k.knln_id;

    
-- Crear un vista llamada v_projects_employees con los campos:
--  		codigo y nombre del proyecto 
-- 			numero, forname y surname de empleado
create view v_projects_employees
	(prjt_code, prjt_name, empl_number, empl_forname, empl_surname)
    as
		select p.prjt_code, p.prjt_name, e.empl_number, e.empl_forname, e.empl_surname
        from t_projects p
        inner join t_projects_employees pe on p.prjt_id = pe.prjt_id
        inner join t_employees e on pe.empl_id = e.empl_id;

-- si no ha salido bien a la primera se elimina y se vuelve a generar
drop view v_projects_employees;		

-- Consultar sobre la vista los proyectos cuyo codigo comience por EXT
select * from v_projects_employees
	where prjt_code like 'EXT%';

-- Creamos la tabla de documentos
CREATE TABLE t_documents(
	docs_id int NOT NULL,
    empl_id int NOT NULL,
    docs_name VARCHAR(100) NOT NULL,
    docs_type VARCHAR(50) NOT NULL,
    PRIMARY KEY (docs_id)
);

-- Agregamos el indice y la FK
ALTER TABLE T_DOCUMENTS
	ADD INDEX fk_docs_empl (empl_id),
    ADD CONSTRAINT fk_docs_empl
		FOREIGN KEY (empl_id) REFERENCES t_employees (empl_id);
   
-- Crear una restriccion en el campo docs_type para que solo acepte los valores: pdf, doc, xls     
ALTER TABLE T_DOCUMENTS
    ADD CONSTRAINT ct_ck_docs_type
		CHECK ('docs_type' in  ('pdf', 'doc', 'xls'));

-- insertamos 8 registros     
INSERT INTO t_documents
	VALUES
		(1,1,'Titulo', 'pdf'),
        (2,1,'Curriculum', 'doc'),
        (3,1,'Certificado OCP', 'pdf'),
        (4,1,'Matriz conocimientos', 'xls'),
        (5,2,'Grado', 'pdf'),
        (6,2,'Curriculum', 'doc'),
        (7,2,'Certificado MS', 'pdf'),
        (8,3,'Titulo', 'pdf');

SELECT CONCAT(e.EMPL_FORNAME, ' ', e.EMPL_SURNAME) FULL_NAME, 
	COUNT(d.DOCS_ID) NUM_DOCS
	FROM T_EMPLOYEES e
    inner join T_DOCUMENTS d
    ON e.EMPL_ID=d.EMPL_ID
    GROUP BY FULL_NAME;
    
SELECT CONCAT(e.EMPL_FORNAME, ' ', e.EMPL_SURNAME) FULL_NAME, 
	COUNT(d.DOCS_ID) NUM_DOCS 
	FROM T_EMPLOYEES e
    inner join T_DOCUMENTS d
    ON e.EMPL_ID=d.EMPL_ID
    GROUP BY FULL_NAME
    ORDER BY NUM_DOCS ASC;
	
SELECT CONCAT(e.EMPL_FORNAME, ' ', e.EMPL_SURNAME) FULL_NAME, 
	COUNT(d.DOCS_ID) NUM_DOCS 
	FROM T_EMPLOYEES e
    inner join T_DOCUMENTS d
    ON e.EMPL_ID=d.EMPL_ID
    GROUP BY FULL_NAME
    ORDER BY NUM_DOCS ASC LIMIT 1,2;  




